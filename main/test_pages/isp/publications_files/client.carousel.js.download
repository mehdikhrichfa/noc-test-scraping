define(function (require) {

	"use strict";

	var $ = require("jquery");

	require("jquery");
	require("imagesLoaded");
	require("owlCarousel");

	(function() {

		function initCarousel() {
			log('init carousel');

			// this is third party code and it is doing some crazy stuff with passing 'this' around.
			// disabling jshint for the third pary code ...
			/* jshint ignore:start */
			(function(window,undefined){
				'$:nomunge'; // Used by YUI compressor.

				var jq_throttle;


				$.throttle = jq_throttle = function( delay, no_trailing, callback, debounce_mode ) {

					var timeout_id,


						last_exec = 0;

					if ( typeof no_trailing !== 'boolean' ) {
						debounce_mode = callback;
						callback = no_trailing;
						no_trailing = undefined;
					}
					function wrapper() {
						var that = this,
							elapsed = +new Date() - last_exec,
							args = arguments;

						// Execute `callback` and update the `last_exec` timestamp.
						function exec() {
							last_exec = +new Date();
							callback.apply( that, args );
						}

						// If `debounce_mode` is true (at_begin) this is used to clear the flag
						// to allow future `callback` executions.
						function clear() {
							timeout_id = undefined;
						}

						if ( debounce_mode && !timeout_id ) {
							// Since `wrapper` is being called for the first time and
							// `debounce_mode` is true (at_begin), execute `callback`.
							exec();
						}

						// Clear any existing timeout.
						if (timeout_id) {
							clearTimeout( timeout_id );
						}

						if ( debounce_mode === undefined && elapsed > delay ) {
							// In throttle mode, if `delay` time has been exceeded, execute
							// `callback`.
							exec();

						} else if ( no_trailing !== true ) {
							// In trailing throttle mode, since `delay` time has not been
							// exceeded, schedule `callback` to execute `delay` ms after most
							// recent execution.
							//
							// If `debounce_mode` is true (at_begin), schedule `clear` to execute
							// after `delay` ms.
							//
							// If `debounce_mode` is false (at end), schedule `callback` to
							// execute after `delay` ms.
							timeout_id = setTimeout( debounce_mode ? clear : exec, debounce_mode === undefined ? delay - elapsed : delay );
						}
					}


					if ( $.guid ) {
						wrapper.guid = callback.guid = callback.guid || $.guid++;
					}

					// Return the wrapper function.
					return wrapper;
				};


				$.debounce = function( delay, at_begin, callback ) {
					return callback === undefined ? jq_throttle( delay, at_begin, false ) : jq_throttle( delay, callback, at_begin !== false );
				};

			})(this);
			/* jshint ignore:end */

			var OwlPlugins = {
				// Plugin structure
				plugin: function(callbacks, reusables){
					// Quick reference to lib for calling what is known to be a function
					this.addCallbackValue = function(settings, callbackName, cbValue) {
						OwlPlugins.lib.applyCallback(
							settings,
							callbackName,
							cbValue
						);
					};

					// Identify a fully scoped reusable function
					this.getReusableFunc = function(callbackName){
						var callbackBits = callbackName.split(".");
						var cb = null, scope = reusables;
						for (var i = 0; i < callbackBits.length; i++) {
							if (scope.hasOwnProperty(callbackBits[i])) {
								scope = scope[callbackBits[i]];
								if (i == callbackBits.length - 1 && typeof(scope) == 'function') {
									cb = scope;
								}
							}
							else {
								// Throw error?
								break;
							}
						}
						return cb;
					};

					// Allows introspection into type of callback value to determine
					// if we are allowed to add it
					// Returns TRUE on successful type check, FALSE on failure
					this.addPotentialCallbackValue = function(settings, callbackName, cbValue){
						if (typeof(cbValue) == "function") {
							this.addCallbackValue(settings, callbackName, cbValue);
							return true;
						}
						else if (typeof(cbValue) == 'string') {
							var reusable = this.getReusableFunc(cbValue);
							if (reusable !== null) {
								this.addCallbackValue(settings, callbackName, this.getReusableFunc(cbValue));
								return true;
							}
							else {
								return false;
							}
						}
						else {
							return false;
						}
					};

					// Throw an error if the callback is not of a desired type
					this.throwCallbackError = function(callbackName){
						throw callbackName + " must be either a function, a name of a reusable function, or an array of either of these.";
					};

					// Add a callback value that is either a function
					// or an array of functions
					this.addCallback = function(settings, callbackName, cbValue) {
						var added = this.addPotentialCallbackValue(settings, callbackName, cbValue);

						if (!added) {
							if (Object.prototype.toString.call(cbValue) === '[object Array]') {
								for (var i = 0; i < cbValue.length; i++) {
									var addedItem = this.addPotentialCallbackValue(settings, callbackName, cbValue[i]);
									if (!addedItem) {
										this.throwCallbackError(callbackName + "[" + i + "]");
									}
								}
							}
							else {
								this.throwCallbackError(callbackName);
							}
						}
					};

					// Apply a plugin to a set of Owl Carousel settings
					this.applyTo = function(settings){
						for (var callbackName in callbacks) {
							var cbValue = callbacks[callbackName];
							this.addCallback(settings, callbackName, cbValue);
						}
					};
				},
				// Library functions
				lib: {
					// Use functional composition to chain together the results
					// of consective functions
					compose: function() {
						var fns = arguments;
						return function (result) {
							for (var i = fns.length - 1; i > -1; i--) {
								result = fns[i].call(this, result);
							}
							return result;
						};
					},
					// Applies a callback function to a given setting
					// If this callback does not exist, just add the function
					// If it does, use functional composition to add it together
					applyCallback: function(baseSettings, callbackName, callbackFunc) {
						if (typeof(baseSettings[callbackName]) != "undefined") {
							var current = baseSettings[callbackName],
								composed = OwlPlugins.lib.compose(current, callbackFunc);
							baseSettings[callbackName] = composed;
						}
						else {
							baseSettings[callbackName] = callbackFunc;
						}
					}
				},
				// Common utilities
				utils: {
					// Generate a GUID-like random number
					generateUUID: function() {
						var d = new Date().getTime();
						var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
							var r = (d + Math.random()*16)%16 | 0;
							d = Math.floor(d/16);
							return (c=='x' ? r : (r&0x3|0x8)).toString(16);
						});
						return uuid;
					},
					// Create a namespaced HTML ID that is random enough
					// to be more or less unique
					makeID: function(prefix) {
						return prefix + "-" + OwlPlugins.utils.generateUUID();
					},
					// Add a value onto a space-separated attribute
					pushAttr: function($, elem, attrName, newAttrValue) {
						var attrValues = [],
							readAttr = $(elem).attr(attrName);
						if (!!readAttr) {
							attrValues = readAttr.split(' ');
						}
						attrValues.push(newAttrValue);
						$(elem).attr(
							attrName,
							attrValues.join(' ')
						);
					},
					// Round a decimal number to a number of digits
					roundDecimal: function(num, digits) {
						if (digits <= 0) return num;
						var factor = (digits * 10),
							n = Math.round(num * factor),
							suf = (n % factor) / factor,
							pre = (n / factor) - suf;
						return pre + suf;
					}
				}
			};


			var OwlA11y = {};

// Owl Accessiblity Internals
			OwlA11y.Internals = {
				// Element functions
				element: {
					init: function(e){
						OwlA11y.Internals.element.makeID(e);
						OwlA11y.Internals.visibleItems.mark(e.owl);
						OwlA11y.Internals.element.controls(e.owl.baseElement);
						OwlA11y.Internals.description.setup(e.owl.baseElement);
						e.reload();
						// Delay initialise finalisation by half a second
						// so we don't clobber initial focus
						setTimeout(function() {
							e.owl.baseElement.attr('data-owl-access-initialised', '1');
						}, 500);
					},
					makeID: function(e) {
						if (!e.owl.baseElement.attr('id')) {
							e.owl.baseElement.attr(
								'id',
								OwlPlugins.utils.makeID('owl-carousel')
							);
						}
					},
					busy: function(e){
						e.attr('aria-busy', 'true');
					},
					notBusy: function(e){
						e.attr('aria-busy', 'false');
					},
					controls: function(elem){
						var controlsID = OwlPlugins.utils.makeID('owl-controls');
						elem.find('.owl-controls').attr({
							'id': controlsID,
							'aria-hidden': 'true',
							'aria-controls': controlsID
						});
					},
					markFocused: function(elem){
						$(elem).attr('data-owl-carousel-focused', '1');
					},
					markUnfocused: function(elem){
						$(elem).removeAttr('data-owl-carousel-focused');
					},
					ifFocused: function(elem, fn) {
						if ($(elem).attr('data-owl-carousel-focused') == '1') fn(elem);
					},
					ifUnfocused: function(elem, fn) {
						if ($(elem).attr('data-owl-carousel-focused') !== '1') fn(elem);
					},
					makeHiddenPara: function(message, id, className, additional){
						var newpAttrs = {
							id:             id,
							hidden:         true,
							'aria-hidden':  false
						};
						if (!!additional && $.isPlainObject(additional)) {
							$.extend(newpAttrs, additional);
						}
						var newp = document.createElement('p');
						newp.className = className;
						for (var i in newpAttrs) {
							newp.setAttribute(i, newpAttrs[i]);
						}
						newp.appendChild(document.createTextNode(message));
						return newp;
					},
					focused: function(e){
						var targ = $(e.target);
						if (targ.attr('data-owl-carousel-focusable') == "1") {
							return targ;
						}
						var closest = targ.closest('[data-owl-carousel-focusable="1"]');
						if (closest.length > 0) return closest;
						return null;
					},
					refocus: function(owl) {
						var focused = $(':focus');
						if (!!owl.baseElement.attr('data-owl-access-initialised')) {
							if (focused.length > 0) {
								var e = { target: focused };
								var targ = OwlA11y.Internals.element.focused(e);
								if (!!targ && targ.get(0) != focused.get(0)) {
									targ.focus();
								}
							}
						}
					}
				},
				// Description functions
				description: {
					// Checks if a description exists
					hasDescription: function(elem){
						return $(elem).find('.owl-access-description').length > 0;
					},
					// Set up description
					setup: function(elem) {
						if (!OwlA11y.Internals.description.hasDescription(elem)) {
							OwlA11y.Internals.description.teardown(elem.get(0));
						}
						var descriptionID = OwlPlugins.utils.makeID('owl-description');
						var message = "Pan through this carousel with the left and right arrow keys.";
						if (!!$(elem).attr('data-owl-carousel-accessmessage')) {
							message = $(elem).attr('data-owl-carousel-accessmessage');
						}
						var helper = OwlA11y.Internals.element.makeHiddenPara(
							message,
							descriptionID,
							"owl-access-description element-invisible"
						);
						$(elem).prepend(helper).attr("aria-describedby", descriptionID);
					},
					// Delete description
					teardown: function(elem) {
						var descID = elem.getAttribute("aria-describedby");
						if (!!descID) {
							$('#' + descID).remove();
							elem.removeAttribute("aria-describedby");
						}
					}
				},
				// Blips: Change notifications
				blips: {
					// Set a blip to trigger ARIA change notification
					set: function(owl) {
						var blipID = OwlPlugins.utils.makeID("owl-blip");
						var blip = OwlA11y.Internals.element.makeHiddenPara(
							"The carousel has moved.",
							blipID,
							"owl-access-blip"
						);
						$(owl.baseElement).prepend(blip);
						setTimeout(function(){
							OwlA11y.Internals.blips.clear(owl.baseElement);
						}, 1000);
					},
					// Clear all blips
					clear: function(elem){
						$(elem).find(".owl-access-blip").remove();
					}
				},
				// Visible items
				visibleItems: {
					markSlide: function(slide, isFocusable){
						var children, i; // javascript has function-level scoping, not block level.  move these variable declarations up.
						
						// Mark aria-hidden and tabindex on slide
						slide.setAttribute('aria-hidden', isFocusable ? 'false' : 'true');
						slide.setAttribute('tabindex', isFocusable ? '0' : '-1');

						if (isFocusable) {
							// Make all tabindexable children tabbable
							children = slide.querySelectorAll('*[data-tabindex-default]');
							for (i = 0; i < children.length; i++) {
								var recoveredTabindex = children[i].getAttribute('data-tabindex-default');
								children[i].setAttribute('tabindex', recoveredTabindex);
							}
						}
						else {
							// Make all tabindexable children... un-tabbable.
							children = slide.querySelectorAll('a, *[tabindex]');
							for (i = 0; i < children.length; i++) {
								var tabindex = children[i].getAttribute('tabindex');
								if (!tabindex) tabindex = "0";
								if (parseInt(tabindex, 10) >= 0) {
									children[i].setAttribute('data-tabindex-default', tabindex);
									children[i].setAttribute('tabindex', '-1');
								}
							}
						}
					},
					mark: function(owl) {
						for (var i = 0; i < owl.owlItems.length; i++) {
							OwlA11y.Internals.visibleItems.markSlide(
								owl.owlItems[i],
								(owl.visibleItems.indexOf(i) >= 0)
							);
						}
					}
				},
				// Event functions
				events: {
					defaultAfterAction: function(){
						return function(){
							OwlA11y.Internals.visibleItems.mark(this.owl);
							OwlA11y.Internals.events.triggerChanges(this.owl);
							OwlA11y.Internals.element.notBusy(this.owl.baseElement);
							OwlA11y.Internals.element.refocus(this.owl);
						};
					},
					documentKeyUp: function(e) {
						var eventTarg = $(e.target),
							targ = OwlA11y.Internals.element.focused(e),
							action = null;
						if (!!targ) {
							var owl = targ.data('owlCarousel');
							if (e.keyCode == 37 || e.keyCode == 38) action = "prev";
							else if (e.keyCode == 39 || e.keyCode == 40) action = "next";
							else if (e.keyCode == 13) {
								if (eventTarg.hasClass('owl-prev')) action = "prev";
								else if (eventTarg.hasClass('owl-next')) action = "next";
							}
							if (!!action) targ.trigger('owl.' + action);
						}
					},
					focusIn: function(e){
						OwlA11y.Internals.element.ifUnfocused(this, function(e){
							//var autoPlay = $(e).data('owlCarousel').options.autoPlay;
							OwlA11y.Internals.element.markFocused(e);
							OwlA11y.Internals.blips.clear(e);
							OwlA11y.Internals.description.setup($(e));
							//if (!!autoPlay) {
							//	$(e).data('owlCarouselAutoPlaySpeed', autoPlay).trigger('owl.stop');
							//}
						});
					},
					focusOut: function(e){
						OwlA11y.Internals.element.ifFocused(this, function(e){
							//var autoPlay = $(e).data('owlCarouselAutoPlaySpeed');
							OwlA11y.Internals.element.markUnfocused(e);
							OwlA11y.Internals.description.teardown(e);
							//if (!!autoPlay) {
							//	$(e).trigger('owl.play', autoPlay);
							//}
						});
					},
					triggerChanges: function(owl) {
						var blipID = OwlPlugins.utils.makeID('owl-blip');
						var blip = OwlA11y.Internals.element.makeHiddenPara(
							"The carousel has moved to slide " + (owl.currentItem + 1) + ".",
							blipID,
							"owl-access-blip"
						);
						$(owl.baseElement).prepend(blip);
						setTimeout(function(){
							OwlA11y.Internals.blips.clear(owl.baseElement);
						}, 1000);
					}
				}
			};

// Owl Accessibility Extra Controls
			OwlA11y.ExtraControls = {
				// Helpful utilities
				utils: {
					// Apply attributes to a jQuery element
					apply: function(elem, attrs){
						if (!!attrs.text) {
							elem.text(attrs.text);
							delete attrs.text;
						}
						elem.attr(attrs);
					}
				},
				// Play/Pause button
				playpause: {
					// Sets button features depending on whether we are playing or paused
					features: function (playing) {
						return {
							title: playing ? 'Pause autoplay' : 'Start autoplay',
							text: playing ? 'Pause' : 'Play',
							'class': 'owl-playpause ' + (playing ? 'owl-playpause-playing' : 'owl-playpause-paused')
						};
					},
					// Triggers play/pause toggle
					playpauseAction: function(e){
						var button = $(e.target),
							elem = button.closest('.owl-carousel'),
							buttonAttr = {};
						if (elem.length > 0) {
							if (elem.data('owlCarouselIsPlaying') == '1') {
								elem.trigger('owl.stop').data('owlCarouselIsPlaying', '0');
								buttonAttr = OwlA11y.ExtraControls.playpause.features(false);
							}
							else {
								var speed = elem.data('owlCarouselAutoplay');
								elem.trigger('owl.play', speed).data('owlCarouselIsPlaying', '1');
								buttonAttr = OwlA11y.ExtraControls.playpause.features(true);
							}
						}
						OwlA11y.ExtraControls.utils.apply(button, buttonAttr);
					},
					// Button click or enter key on button
					buttonAction: function(e) {
						e.stopPropagation();
						if (e.originalEvent.type == "click") {
							e.preventDefault();
							OwlA11y.ExtraControls.playpause.playpauseAction(e);
						}
						else {
							if (e.which == 13) e.preventDefault();
							if (e.which == 13 || e.which == 32) {
								OwlA11y.ExtraControls.playpause.playpauseAction(e);
							}
						}
					},
					// Show button
					button: function(owl){
						var button = null;
						if (!!owl.options.autoPlay) {
							owl.$elem.data('owlCarouselAutoplay', owl.options.autoPlay);
							owl.$elem.data('owlCarouselIsPlaying', !!owl.options.autoPlay ? '1' : '0');
							var params = $.extend({
								tabindex: '0',
								'aria-controls': owl.$elem.attr('id'),
								id: OwlPlugins.utils.makeID("owl-carousel-control-playpause")
							}, OwlA11y.ExtraControls.playpause.features(owl.options.autoPlay));
							button = $('<button />', params);
							button.bind('click keydown', OwlA11y.ExtraControls.playpause.buttonAction);
						}
						return button;
					}
				},
				// Fullscreen button
				fullscreen: {
					features: function(toggled){
						return {
							title: toggled ? "Disable Full Screen view and show normally" : "Show in Full Screen",
							text: toggled ? "Disable Full Screen" : "Show in Full Screen"
						};
					},
					// Button click or enter key on button
					buttonAction: function(e) {
						e.stopPropagation();
						var carousel = $(e.target).closest('.owl-carousel').get(0),
							fire = false;
						if (e.originalEvent.type == "click") {
							e.preventDefault();
							fire = true;
						}
						else {
							if (e.which == 13) e.preventDefault();
							if (e.which == 13 || e.which == 32) {
								fire = true;
							}
						}
						if (fire && JustMakeItBig.canFullscreen()) {
							JustMakeItBig.toggle(carousel, e.target, function(toggled){
								var attrs = OwlA11y.ExtraControls.fullscreen.features(toggled);
								OwlA11y.ExtraControls.utils.apply($(e.target), attrs);
							});
						}
					},
					// Show button
					button: function(owl){
						var button = null;
						if (!!owl.options.enableFullscreen && !!window.JustMakeItBig) {
							var params = $.extend(
								{
									'class': 'owl-fullscreen',
									tabindex: 0,
									'aria-controls': owl.$elem.attr('id'),
									id: OwlPlugins.utils.makeID("owl-carousel-control-fullscreen")
								},
								OwlA11y.ExtraControls.fullscreen.features(false)
							);
							button = $('<button />', params);
							button.bind('click keydown', OwlA11y.ExtraControls.fullscreen.buttonAction);
						}
						return button;
					}
				},
				// Controls on root element
				element: {
					init: function(owl){
						// Sets up the owl-buttons object if one doesn't exist
						var controls = $('.owl-controls .owl-buttons', owl.$elem);
						if (!controls.length) {
							$(owl.$elem).find('.owl-controls').append($('<div />', {
								'class': 'owl-buttons'
							}));
							controls = $('.owl-controls .owl-buttons', owl.baseElement);
						}

						// Enumerates all custom controls
						var customControls = [];

						// Play/pause button
						var playpause = OwlA11y.ExtraControls.playpause.button(owl);
						if (!!playpause) customControls.push(playpause);

						// Fullscreen button
						var fullscreen = OwlA11y.ExtraControls.fullscreen.button(owl);
						if (!!fullscreen) customControls.push(fullscreen);

						if (customControls.length) {
							// Builds container for custom container, populates it,
							// and adds it to the controls area
							var customContainer = $('<div />', {
								'class': 'owl-custom-controls'
							});
							customContainer.append(customControls);
							controls.after(customContainer);
						}
					}
				}
			};

// Owl Accessiblity Plugin
			OwlA11y.Plugin = new OwlPlugins.plugin({
				beforeInit: [
					'a11y.base.setup',
					'a11y.focus.setup'
				],
				afterInit: function(){
					OwlA11y.Internals.element.init(this);
					OwlA11y.ExtraControls.element.init(this);
				},
				beforeUpdate: [
					'a11y.description.teardown',
					'a11y.base.busy'
				],
				beforeMove:   [
					'a11y.description.teardown',
					'a11y.base.busy'
				],
				afterMove:   'a11y.base.act',
				afterUpdate: 'a11y.base.act'
			}, {
				a11y: {
					// Base object
					base: {
						// Initialise a11y attributes on base object
						setup: function() {
							this.$elem.attr({
								tabindex: '0',
								'data-owl-carousel-focusable': '1',
								'aria-live': 'off',
								'aria-atomic': 'true',
								'aria-relevant': 'additions',
								'aria-busy': 'true'
							});

							this.$elem.keyup(OwlA11y.Internals.events.documentKeyUp).attr('data-owl-access-keyup', '1');
						},
						// Set carousel as being busy
						busy: function() {
							OwlA11y.Internals.element.busy(this.$elem);
						},
						// Set carousel as not being busy
						notBusy: function() {
							OwlA11y.Internals.element.notBusy(this.$elem);
						},
						// Run post-update action
						act: function(){
							var act = OwlA11y.Internals.events.defaultAfterAction();
							$.debounce(250, act).call(this);
						},
					},
					// Defines focusing behaviour
					focus: {
						// Initialise focus behaviour
						setup: function(){
							this.$elem.focusin(OwlA11y.Internals.events.focusIn);
							this.$elem.focusout(OwlA11y.Internals.events.focusOut);
						}
					},
					// Description text
					description: {
						teardown: function() {
							OwlA11y.Internals.description.teardown(this.$elem.get(0));
						}
					}
				}
			});




			var $carousel = $('.carousel'); // generic carousel class
			var $carouselHero = $('.carousel.hero'); // hero carousel class
			var $carouselAlumni = $('.carousel.hero-alumni'); // hero carousel class


			var settings = {
				items:1,
				navigation : false,
				autoPlay : false,
				slideSpeed : 300,
				responsiveRefreshRate:0,
				paginationSpeed : 400,
				singleItem:true,
				responsiveBaseWidth: window,
				lazyFollow:true,
				dragBeforeAnimFinish : false,
				mouseDrag : false,
				touchDrag : false,
				addClassActive:true,
				afterUpdate:function(){
					if($(".owl-item").is(".active")){
						$(".slide-content").css("display", "block");
					}

				},
				afterInit:function(){
					if($(".owl-item").is(".active")){
						$(".slide-content").fadeIn(1000);
					}

				},
				beforeMove: function(){
					if($(".owl-item").is(".active")) {
						$(".slide-content").hide();
					}
				},
				afterMove: function(){
					if($(".owl-item").is(".active")) {
						$(".slide-content").fadeIn(1000);
					}
				}

			};




			OwlA11y.Plugin.applyTo(settings);
			window.jQuery('.carousel').owlCarousel(settings);


			// Building the carousels
			if ($carousel.length > 0) {

				// Once all images are loaded...
                // we need to wrap the Require version of jQuery in the Drupal version in order to access the plugin.
				window.jQuery($carousel).imagesLoaded( function() {

					// Build hero carousel
					window.jQuery($carouselHero).each(function(){
                        // this is referencing a plugin that does not support AMD.
                        // the plugin is assigned to the global window.jQuery when it loads, which is the Drupal version, not the AMD version.
                        // therefore, the $ variable here (which refers to the AMD version) does not have the plugin.
                        // we need to access the Drupal version (window.jQuery) to use the plugin.
						window.jQuery(this).owlCarousel($.extend(settings)).removeClass('no-js');
						window.jQuery(this).find(".owl-controls").find(".owl-page span").attr('tabindex','0');

					});
					window.jQuery($carouselAlumni).each(function(){
                        // same thing - need to use Drupal's jquery, not the AMD module.
						window.jQuery(this).owlCarousel($.extend(settings)).removeClass('no-js');
						//window.jQuery(this).find(".owl-controls").find(".owl-page span").append("<a href='#'></a>");
						window.jQuery(this).find(".owl-controls").find(".owl-page span").attr('tabindex','0');

					});


				});

			}


		}
		function initCustomNext2() {
			//var owl =$(".carousel.thumb-image");
			var owlWrap = $('.carousel-container');

			window.jQuery(owlWrap).each(function(){

			var carousel= $(this).find('.alumni-hero, .hero'),
				navigation = $(this).find('.customNavigation'),
				nextBtn = navigation.find('.next'),
				prevBtn = navigation.find('.prev');



				window.jQuery(nextBtn).click(function(){
					//alert("next");
					window.jQuery(carousel).trigger('owl.next');
				});
				window.jQuery(prevBtn).click(function(){
					//alert("prev");
					window.jQuery(carousel).trigger('owl.prev');

				});
			});
		}


		initCarousel();
		initCustomNext2();

	}());

});
